import Test.QuickCheck

----------------------------------------------------------------

isEmpty :: [a] -> Bool
isEmpty []     = True
isEmpty xs      = False

----------------------------------------------------------------

isSingle :: [a] -> Bool
isSingle []   = False
isSingle [x]  = True
isSingle _    = False

----------------------------------------------------------------

head' :: [a] -> a
head' []     = undefined 
head' (x:xs) = x

----------------------------------------------------------------

tail' :: [a] -> [a]
tail' [] = undefined
tail' (x:xs) = xs

----------------------------------------------------------------

length' :: [a] -> Int
length' []     = 0
length' (x:xs) = 1 + length' xs

----------------------------------------------------------------

-- append two lists into one
append :: [a] -> [a] -> [a]
append []  ys    = ys
append (x:xs) ys = x : append xs ys

----------------------------------------------------------------

-- reverse a list
rev :: [a] -> [a]
rev    []  = []
rev (x:xs) = (rev xs) ++ [x]

----------------------------------------------------------------

prop_Whole n xs = 
   take n xs ++ drop n xs == xs

----------------------------------------------------------------

prop_rev xs = 
   rev (rev xs) == xs

----------------------------------------------------------------

prop_length_append xs ys =
   length xs + length ys == length (xs++ys)

----------------------------------------------------------------

data [] a = []
| a : [a]

----------------------------------------------------------------

 [] :: [a]
(:) :: a -> [a] -> [a]

   